# Generated by Django 5.2.7 on 2025-10-28 09:53

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0045_itemquestionanswer'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='settings',
            name='chroma_api_key',
        ),
        migrations.RemoveField(
            model_name='settings',
            name='chroma_database',
        ),
        migrations.RemoveField(
            model_name='settings',
            name='chroma_tenant',
        ),
        migrations.CreateModel(
            name='GitHubPullRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pr_number', models.IntegerField(help_text='GitHub Pull Request number')),
                ('title', models.CharField(help_text='Pull Request title', max_length=500)),
                ('body', models.TextField(blank=True, default='', help_text='Pull Request description/body')),
                ('state', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('merged', 'Merged')], help_text='Pull Request state', max_length=10)),
                ('repo_owner', models.CharField(help_text='GitHub repository owner', max_length=255)),
                ('repo_name', models.CharField(help_text='GitHub repository name', max_length=255)),
                ('author_login', models.CharField(blank=True, default='', help_text='GitHub username of PR author', max_length=255)),
                ('author_avatar_url', models.URLField(blank=True, default='', help_text='URL to author avatar', max_length=500)),
                ('html_url', models.URLField(help_text='GitHub URL to the Pull Request', max_length=500)),
                ('draft', models.BooleanField(default=False, help_text='Whether the PR is a draft')),
                ('merged', models.BooleanField(default=False, help_text='Whether the PR has been merged')),
                ('merged_at', models.DateTimeField(blank=True, help_text='When the PR was merged', null=True)),
                ('head_branch', models.CharField(blank=True, default='', help_text='Source branch name', max_length=255)),
                ('base_branch', models.CharField(blank=True, default='', help_text='Target branch name', max_length=255)),
                ('created_at_github', models.DateTimeField(help_text='When the PR was created on GitHub')),
                ('updated_at_github', models.DateTimeField(help_text='When the PR was last updated on GitHub')),
                ('closed_at_github', models.DateTimeField(blank=True, help_text='When the PR was closed on GitHub', null=True)),
                ('synced_at', models.DateTimeField(auto_now=True, help_text='When this record was last synchronized')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(help_text='Associated IdeaGraph Item', on_delete=django.db.models.deletion.CASCADE, related_name='pull_requests', to='main.item')),
            ],
            options={
                'verbose_name': 'GitHub Pull Request',
                'verbose_name_plural': 'GitHub Pull Requests',
                'ordering': ['-created_at_github'],
                'indexes': [models.Index(fields=['repo_owner', 'repo_name', 'pr_number'], name='gh_pr_repo_idx'), models.Index(fields=['item', 'state'], name='gh_pr_item_state_idx')],
                'unique_together': {('item', 'pr_number', 'repo_owner', 'repo_name')},
            },
        ),
    ]
